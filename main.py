import utils.utils
from config.config import API_URL, API_KEY
from telebot.custom_filters import StateFilter
from telebot.types import Message, BotCommand, CallbackQuery
from telebot.apihelper import ApiTelegramException
from loguru import logger
from utils.api import api
from states.states import UserStateInput, UserStateInfo
import requests
from loader import bot
from keyboards.keyboard import show_cities_keyboard, sorting_keyboard
from utils.utils import is_int

city_id = []
quantity = []
messages = []

button = bot.set_my_commands([BotCommand('city_selection', '–í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥'),
                              BotCommand('date_change', '–°–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã'),
                              BotCommand('sorting', '–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É'),
                              BotCommand('history', '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤')])


@bot.message_handler(commands=['history'])
def history_cmd(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history
    –í—ã–≤–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message:
    :return:
    """
    bot.set_state(message.chat.id, UserStateInfo.history)
    try:
        bot.send_message(message.from_user.id, '–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∑–∞–ø—Ä–æ—Å–æ–≤:')
        bot.send_message(message.from_user.id, '\n'.join(messages))
    except ApiTelegramException:
        bot.send_message(message.chat.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ üòï'
                                          '\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É')


@bot.message_handler(commands=['start'])
def start(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç - –∫–∞–∫–æ–π –∏—Å–∫–∞—Ç—å –≥–æ—Ä–æ–¥.
    :param message : Message
    :return : None
    """
    bot.send_message(message.chat.id, text=f"‚úå –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}")
    bot.set_state(message.chat.id, UserStateInput.command)
    bot.set_state(message.chat.id, UserStateInfo.name)
    with bot.retrieve_data(message.chat.id) as data:
        data.clear()
        quantity.clear()
        logger.info('–ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É: ' + message.text + f" User_id: {message.chat.id}")
        data['command'] = message.text
        data['sort'] = check_command(message.text)
        data['chat_id'] = message.chat.id
    bot.set_state(message.chat.id, UserStateInput.city_insert)
    bot.send_message(message.from_user.id, "üß≥ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—â–µ–º:")


@bot.message_handler(commands=['city_selection'])
def select_city(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥, —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /city_selection
    –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ. –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–∞–∫–æ–π –∏—Å–∫–∞—Ç—å –≥–æ—Ä–æ–¥.
    :param message : Message
    :return : None
    """
    bot.set_state(message.chat.id, UserStateInput.command)
    with bot.retrieve_data(message.chat.id) as data:
        data.clear()
        quantity.clear()
        logger.info('–ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É: ' + message.text + f" User_id: {message.chat.id}")
        data['command'] = message.text
        data['sort'] = check_command(message.text)
        data['chat_id'] = message.chat.id
    bot.set_state(message.chat.id, UserStateInput.city_insert)
    bot.send_message(message.from_user.id, "üß≥ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—â–µ–º:")


@bot.message_handler(state=UserStateInput.city_insert)
def city_insert(message: Message) -> None:
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥–æ—Ä–æ–¥, –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é get_city
    –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö
    :param message : Message
    :return : None
    """
    with bot.retrieve_data(message.chat.id) as data:
        data['city_insert'] = message.text
        logger.info(f'–í–≤–µ–¥—ë–Ω –≥–æ—Ä–æ–¥ {message.text}')
        if len(messages) >= 5:
            messages.pop(0)
            messages.append(message.text)
        else:
            messages.append(message.text)
        cities_url = "https://booking-com.p.rapidapi.com/v1/hotels/locations"
        cities_querystring = {"name": message.text, "locale": "ru"}

        headers = {
            "X-RapidAPI-Key": API_KEY,
            "X-RapidAPI-Host": API_URL
        }
        response_cities = requests.get(cities_url, params=cities_querystring, headers=headers)
        logger.info('–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª: ' + str(response_cities.status_code) + f' User_id: {message.chat.id}')
        try:
            true_cities = api.get_city(response_cities.text)
        except LookupError:
            bot.send_message(message.from_user.id, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
            bot.set_state(message.chat.id, UserStateInput.city_insert)
            bot.send_message(message.from_user.id, "üß≥ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—â–µ–º:")
        bot.send_message(message.from_user.id, 'üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ üîΩ',
                         reply_markup=show_cities_keyboard(message, true_cities))
        if None:
            bot.send_message(message.chat.id, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'
                                              '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∑–∞–Ω–æ–≤–æ')
        bot.set_state(message.chat.id, UserStateInfo.city)


@bot.callback_query_handler(lambda c: is_int(c.data))
def destination_id_callback(call: CallbackQuery) -> None:
    """
    –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏

    :param call:
    :return : None
    """
    logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥')
    city_id.clear()
    city_id.append(call.data)
    if call.data:
        bot.set_state(call.message.chat.id, UserStateInput.destination_id)
        with bot.retrieve_data(call.message.chat.id) as data:
            data['destination_id'] = call.data
        bot.set_state(call.message.chat.id, UserStateInput.hotels_amount)
        bot.send_message(call.message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å? (–Ω–µ –±–æ–ª–µ–µ 15)')


@bot.message_handler(state=UserStateInput.hotels_amount)
def input_quantity(message: Message) -> None:
    """
    –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–¥–∞–≤–∞–µ–º—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–µ–ª–µ–π, –∞ —Ç–∞–∫ –∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏
    –≤–≤–µ–¥—ë–Ω–Ω–æ–µ —á–∏—Å–ª–æ–º –∏ –≤—Ö–æ–¥–∏—Ç –ª–∏ –æ–Ω–æ –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 1 –¥–æ 15
    :param message : Message
    :return : None
    """
    if message.text.isdigit():
        if 0 < int(message.text) <= 15:
            logger.info('–í–≤–æ–¥ –∏ –∑–∞–ø–∏—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π: ' + message.text + f' User_id: {message.chat.id}')
            with bot.retrieve_data(message.chat.id) as data:
                data['quantity_hotels'] = message.text
                if len(messages) >= 5:
                    messages.pop(0)
                    messages.append(message.text)
                else:
                    messages.append(message.text)
            bot.set_state(user_id=message.chat.id, state=UserStateInput.date_in)
            bot.send_message(message.from_user.id,
                             'üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É ***–∑–∞—Å–µ–ª–µ–Ω–∏—è*** –≤ –æ—Ç–µ–ª—å'
                             '\n(–≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ "–º–µ—Å—è—Ü-–¥–µ–Ω—å"):', parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 15! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥!')
    quantity.append(message.text)


@bot.message_handler(state=UserStateInput.date_in)
def in_date(message: Message) -> None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∏–∑ –æ—Ç–µ–ª—è
    :param message : Message
    :return : None
    """
    logger.info('–í–≤–æ–¥ –¥–∞—Ç—ã –∑–∞—Å–µ–ª–µ–Ω–∏—è –≤ –æ—Ç–µ–ª—å')
    api.inn_date = message.text
    if len(messages) >= 5:
        messages.pop(0)
        messages.append(message.text)
    else:
        messages.append(message.text)
    bot.set_state(user_id=message.chat.id, state=UserStateInput.date_out)
    bot.send_message(message.from_user.id, 'üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É ***–≤—ã–µ–∑–¥–∞***'
                                           '\n(–≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ "–º–µ—Å—è—Ü-–¥–µ–Ω—å"):', parse_mode='Markdown')


@bot.message_handler(state=UserStateInput.date_out)
def out_date(message: Message) -> None:
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∏–∑ –æ—Ç–µ–ª—è –∏
    –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç—Ä–∏ —Å–ø–æ—Å–æ–±–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫

    :param message : Message
    :return : None
    """
    logger.info('–í–≤–æ–¥ –¥–∞—Ç—ã –≤—ã–µ–∑–¥–∞ –∏–∑ –æ—Ç–µ–ª—è')
    api.outt_date = message.text
    if len(messages) >= 5:
        messages.pop(0)
        messages.append(message.text)
    else:
        messages.append(message.text)
    bot.set_state(user_id=message.chat.id, state=UserStateInput.sort)
    bot.send_message(message.from_user.id, '‚Üï –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏',
                     reply_markup=sorting_keyboard(message))


@bot.message_handler(commands=['date_change'])
def date_changing(message: Message) -> None:
    """
    –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É date_change –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –∑–∞—Å–µ–ª–µ–Ω–∏—è
    –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –¥–∞—Ç—É
    :param message:
    :return:
    """
    logger.info('–í–≤–æ–¥ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –≤ –æ—Ç–µ–ª—å')
    if len(messages) >= 5:
        messages.pop(0)
        messages.append(message.text)
    else:
        messages.append(message.text)
    bot.set_state(user_id=message.chat.id, state=UserStateInput.date_in)
    bot.send_message(message.from_user.id, 'üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É ***–∑–∞—Å–µ–ª–µ–Ω–∏—è*** –≤ –æ—Ç–µ–ª—å\n(–≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ '
                                           '"–º–µ—Å—è—Ü-–¥–µ–Ω—å"):', parse_mode='Markdown')


@bot.message_handler(state=UserStateInput.sort)
def sort_choice(message: Message) -> None:
    """
    –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç—Ä–∏ —Å–ø–æ—Å–æ–±–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫

    :param message : Message
    :return : None
    """
    logger.info('–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏')
    bot.send_message(message.from_user.id, '‚Üï –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ‚Üï',
                     reply_markup=sorting_keyboard(message))


@bot.callback_query_handler(lambda c: c.data.isalpha())
def sort_callback(call: CallbackQuery) -> None:
    """
    –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é take_hotels
    –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏ KeyError –∑–∞–Ω–æ–≤–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –∑–∞—Å–µ–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :param call:
    :return : None
    """
    api.srt = call.data
    try:
        take_hotels(call.message)
    except KeyError:
        bot.send_message(call.message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.')
        bot.set_state(user_id=call.message.chat.id, state=UserStateInput.date_in)
        bot.send_message(call.message.chat.id, 'üóì –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É ***–∑–∞—Å–µ–ª–µ–Ω–∏—è*** –≤ –æ—Ç–µ–ª—å\n(–≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ '
                                               '"–º–µ—Å—è—Ü-–¥–µ–Ω—å"):', parse_mode='Markdown')


@bot.message_handler(state=UserStateInput.hotels)
def take_hotels(message: Message) -> None:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π —Å —É—á–µ—Ç–æ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π

    :param message : Message
    :return : None
    """
    logger.info('–ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π –ø–æ id')
    try:
        hotels_dict = api.get_hotels(city_id[0])
        if hotels_dict:
            bot.send_message(message.chat.id, text='‚úî –°–ø–∏—Å–æ–∫ –æ—Ç–µ–ª–µ–π –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:')
            count = 0
            for name, kind in hotels_dict.items():
                bot.send_message(message.chat.id, f'üõé –û—Ç–µ–ª—å: {name}\nüõÖ –¢–∏–ø: {kind}')
                count += 1
                if count == int(quantity[0]):
                    break
        else:
            bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Ç–µ–ª–∏ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º üòï'
                                              '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥')
            select_city(message)
        bot.send_message(message.chat.id, '–ö–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.')
        bot.send_message(message.chat.id, text='–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, –±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –∏–ª–∏\nüëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é')
    except IndexError:
        bot.send_message(message.chat.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ üòï'
                                          '\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∑–∞–Ω–æ–≤–æ')


@bot.message_handler(commands=['sorting'])
def sort_command(message: Message) -> None:
    """
    –°–º–µ–Ω–∞ —Å–ø–æ—Å–æ–±–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    :param message : Message
    :return : None
    """
    logger.info('–°–º–µ–Ω–∞ —Å–ø–æ—Å–æ–±–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏')
    bot.set_state(user_id=message.chat.id, state=UserStateInput.sort)


def check_command(command: str) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

    :param command : str
    :return : str
    """
    if command == '/sorting':
        return 'PRICE_LOW_TO_HIGH'
    elif command == '/date_change':
        return 'DATE_CHANGED'
    elif command == '/city_selection':
        return 'CITY_SELECTED'
    elif command == '/history':
        return 'HISTORY_RETURNED'


if __name__ == '__main__':
    bot.add_custom_filter(StateFilter(bot))
    api.set_default_commands(bot)
    bot.infinity_polling()
